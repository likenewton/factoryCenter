<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="cn.yunovo.iov.zen.biz.test.mapper.DeviceTestItemMapper">

	<resultMap id="BaseResultMap"
		type="cn.yunovo.iov.zen.biz.test.model.DeviceTestItemDO">
		<id property="id" column="id" jdbcType="INTEGER" />
		<result property="testId" column="test_id" jdbcType="INTEGER" />
		<result property="testItem" column="test_item"
			jdbcType="VARCHAR" />
		<result property="testValue" column="test_value"
			jdbcType="INTEGER" />
		<result property="testResult" column="test_result"
			jdbcType="VARCHAR" />
		<result property="testMethod" column="test_method"
			jdbcType="TINYINT" />
	</resultMap>

	<sql id="Base_Column_List">
		id,test_id,test_item,test_value,test_result,test_method
	</sql>

	<select id="getDeviceTestItemById" parameterType="integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		t_device_testitem
		where
		id = #{id}
	</select>

	<select id="selectDeviceTestItem"
		parameterType="cn.yunovo.iov.zen.biz.test.model.DeviceTestItemQuery"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_device_testitem
		<where>
			<if test="query.testId != null">
				and test_id = #{ query.testId, jdbcType=INTEGER }
			</if>
			<if test="query.testItem != null and query.testItem != ''">
				and test_item = #{ query.testItem, jdbcType=VARCHAR }
			</if>
			<if test="query.testValue != null and query.testValue != ''">
				and test_value = #{ query.testValue, jdbcType=VARCHAR }
			</if>
			<if test="query.testResult != null and query.testResult != ''">
				and test_result = #{ query.testResult, jdbcType=VARCHAR }
			</if>
			<if test="query.testMethod != null">
				and test_method = #{ query.testMethod, jdbcType=TINYINT }
			</if>
		</where>
		<if test="condition != null">
			<if
				test="condition.order.asc != null and condition.order.desc == null">
				order by ${condition.order.asc } asc
			</if>
			<if
				test="condition.order.desc != null and condition.order.asc == null">
				order by ${condition.order.desc } desc
			</if>
			<if
				test="condition.order.asc != null and condition.order.desc != null">
				order by ${condition.order.asc } asc, ${condition.order.desc } desc
			</if>
			<if test="condition.limit.limit != null">
				limit ${condition.limit.limit }
			</if>
		</if>
	</select>
	<insert id="insertDeviceTestItem" useGeneratedKeys="true"
		keyProperty="id"
		parameterType="cn.yunovo.iov.zen.biz.test.model.DeviceTestItemDO">
		insert into t_device_testitem
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="testId != null">
				test_id,
			</if>
			<if test="testItem != null">
				test_item,
			</if>
			<if test="testValue != null">
				test_value,
			</if>
			<if test="testResult != null">
				test_result,
			</if>
			<if test="testMethod != null">
				test_method,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="testId != null">
				#{testId, jdbcType=INTEGER},
			</if>
			<if test="testItem != null">
				#{testItem, jdbcType=VARCHAR},
			</if>
			<if test="testValue != null">
				#{testValue, jdbcType=VARCHAR},
			</if>
			<if test="testResult != null">
				#{testResult, jdbcType=VARCHAR},
			</if>
			<if test="testMethod != null">
				#{testMethod, jdbcType=TINYINT},
			</if>
		</trim>
	</insert>

	<update id="updateDeviceTestItem"
		parameterType="cn.yunovo.iov.zen.biz.test.model.DeviceTestItemDO">
		update t_device_testitem set
		test_id = #{testId,jdbcType=INTEGER }
		,test_item = #{testItem,jdbcType=VARCHAR }
		,test_value = #{testValue,jdbcType=VARCHAR }
		,test_result = #{testResult,jdbcType=VARCHAR }
		,test_method = #{testMethod,jdbcType=TINYINT }
		where
		id = #{id}
	</update>

	<delete id="deleteDeviceTestItemById" parameterType="integer">
		delete from
		t_device_testitem
		where
		id = #{id}
	</delete>

	<insert id="batchInsertDeviceTestItem">
		insert into
		t_device_testitem(test_id,test_item,test_value,test_result,test_method)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.testId},#{item.testItem},#{item.testValue},#{item.testResult},#{item.testMethod})
		</foreach>
	</insert>
</mapper>